<!DOCTYPE html>

<html lang="en"><head><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1.0" name="viewport"/><title>Poisson Equation Finite Element Method · DifferentialEquations.jl</title><link href="https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.min.css" rel="stylesheet" type="text/css"/><link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/styles/default.min.css" rel="stylesheet" type="text/css"/><link href="https://fonts.googleapis.com/css?family=Lato|Ubuntu+Mono" rel="stylesheet" type="text/css"/><link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet" type="text/css"/><link href="../assets/documenter.css" rel="stylesheet" type="text/css"/><script>documenterBaseURL=".."</script><script data-main="../assets/documenter.js" src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.2.0/require.min.js"></script><script src="../../versions.js"></script><meta content="noindex" name="robots"/></head><body><nav class="toc"><a href="../index.html"><img alt="DifferentialEquations.jl logo" class="logo" src="../assets/logo.png"/></a><h1>DifferentialEquations.jl</h1><form action="../search.html" class="search"><select id="version-selector" onchange="window.location.href=this.value"><option disabled="disabled" selected="selected" value="#">Version</option></select><input id="search-query" name="q" placeholder="Search docs" type="text"/></form><ul><li><a class="toctext" href="../index.html">Home</a></li><li><span class="toctext">Tutorials</span><ul><li><a class="toctext" href="ode_example.html">Ordinary Differential Equations</a></li><li><a class="toctext" href="sde_example.html">Stochastic Differential Equations</a></li><li><a class="toctext" href="dde_example.html">Delay Differential Equations</a></li><li><a class="toctext" href="dae_example.html">Differential Algebraic Equations</a></li><li class="current"><a class="toctext" href="fempoisson_example.html">Poisson Equation Finite Element Method</a><ul class="internal"></ul></li><li><a class="toctext" href="femheat_example.html">Heat Equation Finite Element Method</a></li><li><a class="toctext" href="femstochastic_example.html">Stochastic Finite Element Method</a></li></ul></li><li><span class="toctext">Basics</span><ul><li><a class="toctext" href="../basics/overview.html">Overview of DifferentialEquations.jl</a></li><li><a class="toctext" href="../basics/common_solver_opts.html">Common Solver Options</a></li><li><a class="toctext" href="../basics/solution.html">Solution Handling</a></li><li><a class="toctext" href="../basics/plot.html">Plot Functions</a></li><li><a class="toctext" href="../basics/integrator.html">Integrator Interface</a></li></ul></li><li><span class="toctext">Equation Types</span><ul><li><a class="toctext" href="../types/ode_types.html">ODE Types</a></li><li><a class="toctext" href="../types/sde_types.html">SDE Types</a></li><li><a class="toctext" href="../types/dde_types.html">DDE Types</a></li><li><a class="toctext" href="../types/dae_types.html">DAE Types</a></li><li><a class="toctext" href="../types/fem_types.html">FEM Types</a></li><li><a class="toctext" href="../types/stokes_types.html">Stokes Types</a></li></ul></li><li><span class="toctext">Solver Algorithms</span><ul><li><a class="toctext" href="../solvers/ode_solve.html">ODE Solvers</a></li><li><a class="toctext" href="../solvers/sde_solve.html">SDE Solvers</a></li><li><a class="toctext" href="../solvers/dde_solve.html">DDE Solvers</a></li><li><a class="toctext" href="../solvers/dae_solve.html">DAE Solvers</a></li><li><a class="toctext" href="../solvers/fempoisson_solve.html">FEM Poisson Solvers</a></li><li><a class="toctext" href="../solvers/femheat_solve.html">FEM Heat Solvers</a></li><li><a class="toctext" href="../solvers/fdmstokes_solve.html">Stokes Solvers</a></li></ul></li><li><span class="toctext">Additional Features</span><ul><li><a class="toctext" href="../features/performance_overloads.html">Performance Overloads</a></li><li><a class="toctext" href="../features/callback_functions.html">Event Handling and Callback Functions</a></li><li><a class="toctext" href="../features/callback_library.html">Callback Library</a></li><li><a class="toctext" href="../features/monte_carlo.html">Parallel Monte Carlo Simulations</a></li><li><a class="toctext" href="../features/mesh.html">Meshes</a></li><li><a class="toctext" href="../features/output_specification.html">Output Specification</a></li><li><a class="toctext" href="../features/progress_bar.html">Juno Progress Bar Integration</a></li></ul></li><li><span class="toctext">Analysis Tools</span><ul><li><a class="toctext" href="../analysis/parameterized_functions.html">ParameterizedFunctions</a></li><li><a class="toctext" href="../analysis/parameter_estimation.html">Parameter Estimation</a></li><li><a class="toctext" href="../analysis/sensitivity.html">Sensitivity Analysis</a></li><li><a class="toctext" href="../analysis/uncertainty_quantification.html">Uncertainty Quantification</a></li><li><a class="toctext" href="../analysis/dev_and_test.html">Algorithm Development and Testing</a></li></ul></li></ul></nav><article id="docs"><header><nav><ul><li>Tutorials</li><li><a href="fempoisson_example.html">Poisson Equation Finite Element Method</a></li></ul><a class="edit-page" href="https://github.com/JuliaDiffEq/DiffEqDocs.jl/tree/6984679888983d324304df0b3f20620212ac259d/docs/src/tutorials/fempoisson_example.md"><span class="fa"></span> Edit on GitHub</a></nav><hr/></header><h1><a class="nav-anchor" href="#Poisson-Equation-Finite-Element-Method-1" id="Poisson-Equation-Finite-Element-Method-1">Poisson Equation Finite Element Method</a></h1><p>This tutorial will introduce you to the functionality for solving a PDE. Other introductions can be found by <a href="https://github.com/JuliaDiffEq/DiffEqTutorials.jl">checking out DiffEqTutorials.jl</a>.</p><p>In this example we will solve the Poisson Equation <span>$Δu=f$</span>. For our example, we will take the linear equation where <span>$f(x,y) = \sin(2πx)\cos(2πy)$</span>. For this equation we know that the solution is <span>$u(x,y,t)= \sin(2πx)\cos(2πy)/(8π^2)$</span> with gradient <span>$Du(x,y) = [\cos(2πx)\cos(2πy)/(4π) -\sin(2πx)\sin(2πy)/(4π)]$</span>. Thus, we define the functions for a <code>PoissonProblem</code> as follows:</p><pre><code class="language-julia">f(x) = sin(2π.*x[:,1]).*cos(2π.*x[:,2])
gD(x) = sin(2π.*x[:,1]).*cos(2π.*x[:,2])/(8π*π)</code></pre><p>Or we can use the <code>@fem_def</code> macro to beautify our code. The first argument is the function signature, which here is <code>(x)</code>. Second it's a list of variables to convert. This makes more sense in the Heat Equation examples, so we put in the blank expression <code>()</code> for now. Then we put in our expression, and lastly we define the parameter values. <code>@fem_def</code> will automatically replace <code>x</code> by <code>x[:,1]</code> and <code>y</code> by <code>x[:,2]</code>, and will also substitute in the defined parameters. The previous definition using <code>@fem_def</code> is as follows:</p><pre><code class="language-julia">f  = @fem_def((x),TestF,begin
  sin(α.*x).*cos(α.*y)
end,α=&gt;6.28)
gD = @fem_def (x) TestgD begin
  sin(α.*x).*cos(α.*y)/β
end α=&gt;6.28) β=&gt;79.0</code></pre><p>The linebreaks are not required but I think it makes it more legible!</p><p>Here we chose the Dirichlet boundary condition <code>gD</code> to give the theoretical solution.  Other example problems can be found in <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl/tree/master/src/premades/premade_problems.jl">src/examples/exampleProblems.jl</a>. To solve this problem, we first have to generate a mesh. Here we will simply generate a mesh of triangles on the square [0,1]x[0,1] with dx=2^(-5). To do so, we use the code:</p><pre><code class="language-julia">dx = 1//2^(5)
mesh = notime_squaremesh([0 1 0 1],dx,:dirichlet)
prob = PoissonProblem(f,mesh,gD=gD)</code></pre><p>Note that by specifying <code>:dirichlet</code>, our boundary conditions is set on all boundaries to Dirichlet. This gives an FEMmesh object which stores a finite element mesh in the same layout as <a href="http://www.math.uci.edu/~chenlong/programming.html">iFEM</a>. Notice this code shows that the package supports the use of rationals in meshes. Other numbers such as floating point and integers can be used as well. Finally, to solve the equation we use</p><pre><code class="language-julia">sol = solve(prob)</code></pre><p><code>solve</code> takes in a mesh and a PoissonProblem and uses the solver to compute the solution. Here the solver was chosen to be GMRES. Other solvers can be found in the documentation. This returns a FEMSolution object which holds data about the solution, such as the solution values (u). To plot the solution, we use the command</p><pre><code class="language-julia">using Plots
plot(sol)</code></pre><p>Here is the plot shown against the analytical solution to show the accuracy:</p><p><img alt="Poisson Example Solution" src="../assets/introductionExample.png"/></p><footer><hr/><a class="previous" href="dae_example.html"><span class="direction">Previous</span><span class="title">Differential Algebraic Equations</span></a><a class="next" href="femheat_example.html"><span class="direction">Next</span><span class="title">Heat Equation Finite Element Method</span></a></footer></article></body></html>
